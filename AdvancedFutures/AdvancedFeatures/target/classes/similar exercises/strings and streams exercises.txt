Exercise 1: Concatenate Strings
Write a program that receives a list of strings from the user.
Implement a method to concatenate all the strings in the list into a single string using streams.
Display the concatenated string.

    Solution:
        Stream API -> Collectors.joining(<delimitatorul/separatorul>)

Exercise 2: Filter Strings by Length
Write a program that receives a list of strings from the user.
Implement a method to filter out and display only the strings that have a length greater than a specified value using streams.

    Solution:
        Stream API -> filter -> comparam size-ul fiecarui string cu size-ul dat

Exercise 3: Count Strings with a Specific Character
Write a program that receives a list of strings from the user and a specific character.
Implement a method to count and display the number of strings in the list that contain the given character using streams.

    Solution 1:
        Loop (0, n-1) -> if string contains specific char -> contor++;

    Solution 2:
        long total = list.stream().filter(it -> it.contains(specificString/specificChar)).count();

Exercise 4: Remove Duplicate Strings
Write a program that receives a list of strings from the user.
Implement a method to remove duplicate strings from the list using streams.
Display the updated list without duplicates.

    Solution 1 - using Set #1:
        Pas 1: list = initializezi Lista de valori duplicitare
        Pas 2: Set<Integer> distinctList = new HashSet<>(list);

    Solution 2 - using Set #2:
        Pas 1: initializam lista
        Pas 2: initializam setul cu constructor Set<Integer> distinctList = new HashSet<>();
        Pas 3: Loop (0, n-1) in list -> distinctList.add/put(elementul curent)

    Solution 3:
        List <Integer> distinctList = list.stream().distinct().toList();
        Set <Integer> distinctList = list.stream().distinct().collect(Collector.toSet()); (ceva de genu)

Exercise 5: Sort Strings by Length
Write a program that receives a list of strings from the user.
Implement a method to sort the strings in the list based on their length using streams.
Display the sorted list.

Exercise 6: Check Palindromic Strings
Write a program that receives a list of strings from the user.
Implement a method to check and display whether each string in the list is a palindrome (reads the same forwards and backwards) using streams.

Exercise 7: Replace Substrings
Write a program that receives a list of strings from the user and two substrings.
Implement a method to replace occurrences of the first substring with the second substring in each string of the list using streams.
Display the updated list of strings.

Exercise 8: Find Longest String
Write a program that receives a list of strings from the user.
Implement a method to find and display the longest string in the list using streams.

Exercise 9: Extract Unique Characters
Write a program that receives a list of strings from the user.
Implement a method to extract all unique characters from the strings and display them as a sorted list using streams.

Exercise 10: Reverse Strings
Write a program that receives a list of strings from the user.
Implement a method to reverse each string in the list using streams.
Display the updated list with reversed strings.